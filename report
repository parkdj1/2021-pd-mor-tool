#!/usr/bin/env ruby

require "optparse"
require './lib/pagerduty_incidents'

### CONFIGURE FLAG OPTIONS
options = {}
OptionParser.new do |opts|

  opts.banner = <<-EOS
Run Command: `bundle exec ./report`

Arguments: 0 - 2 arguments accepted, based on mode

Flag Options:
        -m, --mode       Specifying timeframe (default: "def")
                           - "def" : run function with 0 to 2 arguments (MONTH YEAR)
                             - no arguments : default to previous month, current year
                           - "range" run function with 2 arguments (SINCE UNTIL)
                             format : %m-%d-%Y (i.e. 04-20-2020 05-08-2020)
        -e, --[no-]ext   Toggle detailed csv report export (default: off)
        -c, --columns    Columns to see in extended report as an array of strings separated by ','
                           i.e. c1,c2,c3 (see doc for more details)
        -p, --[no-]plot  Toggle plotting mode (default: on)
        -h, --help       Display flag options

Note: Try to make queries on the more specific side when possible to avoid PagerDuty errors
EOS

  opts.on("--mode=MODE", "-m=MODE") {|m| options[:mode] = m}
  opts.on("--columns=COLUMNS", "-c=COLUMNS", Array) {|c| options[:columns] = c}
  opts.on("--[no-]ext", "-e") {|e| options[:ext] = e}
  opts.on("--[no-]plot", "-p") {|p| options[:plot] = p}  
#  opts.on("-v", "--verbose") {options[:verbose] = true}
#        -v, --verbose    Toggle verbose mode (default: off)
  opts.on("-h", "--help") {puts opts.banner && exit}
end.parse!



### PROCESS ARGUMENTS AND FLAG OPTIONS
mode = options[:mode] || "def"
raise("TOO FEW ARGUMENTS FOR SPECIFIED MODE") if options[:mode] == "range" && !ARGV[1]

arg1 = ARGV[0] || ""
arg2 = ARGV[1] || ""

ext = options[:ext] || false
columns = options[:columns] || []
plot = options[:plot] || true


### RETRIEVE DATA FROM PAGERDUTY 
responses = PagerdutyIncidents.new(mode,arg1,arg2)


### PARSE THROUGH PAGERDUTY DATA AND EXPORT AS CSV
slength = responses.get_data(ext,columns,plot)
puts "Export complete"


### PLOT DATA
if plot
  puts "Starting plots..."
  urg = (["All"] + PagerdutyIncidents::URGENCIES.map{|u| u.capitalize}).join(',')
  system("./plot.py #{urg} #{responses.team_names.join(',').tr(' ','_')} #{responses.since.strftime("%Y-%B-%m-%d")} #{responses.until.strftime("%Y-%B-%m-%d")}")
end

puts "Report Complete. Have a great month!"
