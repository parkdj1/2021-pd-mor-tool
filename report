#!/usr/bin/env ruby

require './pagerduty_incidents'
require "optparse"

options = {}
optparse = OptionParser.new do |opts|
  opts.banner = <<-EOS
Usage: `bundle exec ./report`

Options:
        -m, --mode       specifying timeframe (default: "def", "range")
                           - "def" can take 0-2 int arguments (MONTH YEAR)
                           - "range" must have 2 arguments (SINCE UNTIL)
                             format : %m-%d-%Y (i.e. 04-20-2020 05-08-2020)
        -c, --columns    columns to see in extended csv as string of symbols separated by spaces
                           i.e. ":c1 :c2 :c3" (see doc for more details)
        -e, --ext        set true or false to toggle detailed csv report export (default: true)

Note: Try to make queries on the more specific side when possible to avoid PagerDuty errors
EOS
  opts.on("--mode=MODE", "-m=MODE") {|m| options[:mode] = m}
  opts.on("--columns=COLUMNS", "-c=COLUMNS") {|c| options[:columns] = c}
  opts.on("--ext=EXT", "-e=EXT") {|e| options[:ext] = e}
end
optparse.parse!

if options[:mode]
  mode = options[:mode]
  raise("Mode specified but no arguments given") if !ARGV[0] || !ARGV[1]
elsif ARGV[0]
  puts "Warning: arguments given but no mode specified.\nEnter a mode or return to continue to default "
  mode = gets.chomp
  if mode != "def" && mode != "range"
    puts "Continuing to default..."
    ARGV[0] = ""
    ARGV[1] = ""
  end
end

arg1 = ARGV[0] || ""
arg2 = ARGV[1] || ""

responses = PagerdutyIncidents.new(mode,arg1,arg2)

puts "exporting data\n"

options[:columns] ? columns = options[:columns].split(" ") : columns = []
options[:ext] ? ext = options[:ext].strip.downcase : ext = true

responses.get_data(ext,columns)

puts "export complete"

